{"version":3,"sources":["./src/app/modules/dashboard/operator/operator-add/operator-add.component.html","./src/app/modules/dashboard/operator/operator-add/operator-add.component.ts","./src/app/modules/dashboard/operator/operator.page.ts","./src/app/modules/dashboard/operator/operator.module.ts","./src/app/modules/dashboard/operator/operator.page.scss","./src/app/modules/dashboard/operator/operator-add/operator-add.component.scss","./src/app/modules/dashboard/operator/operator.service.ts","./src/app/modules/dashboard/operator/operator.page.html","./src/app/modules/dashboard/operator/operator-routing.module.ts"],"names":[],"mappings":"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","file":"operator-operator-module.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Add company user</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"dismiss()\\\">close</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"addOperatorForm\\\" *ngIf=\\\"addOperatorForm\\\" #addOperatorFormDirective=\\\"ngForm\\\">\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col size-md=\\\"10\\\" offset-md=\\\"1\\\">\\n          <ion-card>\\n            <ion-card-header>\\n              <ion-card-title class=\\\"ion-text-center\\\">Add company user</ion-card-title>\\n              <ion-progress-bar *ngIf=\\\"loading$ | async\\\" type=\\\"indeterminate\\\" color=\\\"primary\\\"></ion-progress-bar>\\n            </ion-card-header>\\n            <ion-card-content>\\n              <ion-list>\\n                <ion-item>\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"person-outline\\\" slot=\\\"start\\\"></ion-icon>\\n                  <ion-label position=\\\"floating\\\">Login</ion-label>\\n                  <ion-input type=\\\"text\\\" autocomplete autocorrect formControlName=\\\"login\\\"></ion-input>\\n                </ion-item>\\n                <ion-text *ngIf=\\\"addOperatorForm.get('login').touched && addOperatorForm.get('login').errors\\\"\\n                  class=\\\"input-error\\\" color=\\\"danger\\\">\\n                  {{addOperatorForm.get('login').errors | json}}\\n                </ion-text>\\n                <ion-item>\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"mail-outline\\\" slot=\\\"start\\\"></ion-icon>\\n                  <ion-label position=\\\"floating\\\">Email</ion-label>\\n                  <ion-input type=\\\"email\\\" autocomplete autocorrect formControlName=\\\"email\\\"></ion-input>\\n                </ion-item>\\n                <ion-text *ngIf=\\\"addOperatorForm.get('email').touched && addOperatorForm.get('email').errors\\\"\\n                  class=\\\"input-error\\\" color=\\\"danger\\\">\\n                  {{addOperatorForm.get('email').errors | json}}\\n                </ion-text>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"lock-closed-outline\\\" slot=\\\"start\\\"></ion-icon>\\n                  <ion-label position=\\\"floating\\\">Password</ion-label>\\n                  <ion-input [type]=\\\"inputType\\\" autocomplete autocorrect formControlName=\\\"password\\\"></ion-input>\\n                  <ion-icon class=\\\"ion-align-self-center\\\"\\n                    [name]=\\\"inputType === 'password' ? 'eye-outline' : 'eye-off-outline'\\\" slot=\\\"end\\\"\\n                    (click)=switchInputType()></ion-icon>\\n                </ion-item>\\n                <ion-text\\n                  *ngIf=\\\"addOperatorForm.get('password').touched && addOperatorForm.get('password').errors\\\"\\n                  class=\\\"input-error\\\" color=\\\"danger\\\">\\n                  {{addOperatorForm.get('password').errors | json}}\\n                </ion-text>\\n                <ion-item lines=\\\"none\\\">\\n                  <ion-icon class=\\\"ion-align-self-center\\\" name=\\\"reorder-two-outline\\\" slot=\\\"start\\\"></ion-icon>\\n\\n                  <ion-label position=\\\"floating\\\">Password Confirm</ion-label>\\n                  <ion-input [type]=\\\"inputType\\\" autocomplete autocorrect formControlName=\\\"passwordConfirm\\\"></ion-input>\\n                  <ion-icon *ngIf=\\\"addOperatorForm.get('passwordConfirm').status === 'VALID'\\\"\\n                    class=\\\"ion-align-self-center\\\" [name]=\\\"'checkmark-done-outline'\\\" color=\\\"primary\\\" slot=\\\"end\\\">\\n                  </ion-icon>\\n                </ion-item>\\n                <ion-text\\n                  *ngIf=\\\"addOperatorForm.get('passwordConfirm').touched && addOperatorForm.get('passwordConfirm').errors\\\"\\n                  class=\\\"input-error\\\" color=\\\"danger\\\">\\n                  {{addOperatorForm.get('passwordConfirm').errors | json}}\\n                </ion-text>\\n              </ion-list>\\n            </ion-card-content>\\n\\n          </ion-card>\\n\\n          <ion-row>\\n            <ion-col>\\n              <ion-button expand=\\\"block\\\"\\n                [disabled]=\\\"addOperatorForm.status === 'INVALID' || addOperatorForm.status === 'PENDING'\\\"\\n                (click)=\\\"formSubmitSubject$.next()\\\">\\n                Signup\\n              </ion-button>\\n            </ion-col>\\n          </ion-row>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n  </form>\\n</ion-content>\";","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, FormGroupDirective, Validators } from '@angular/forms';\nimport { ModalController } from '@ionic/angular';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, startWith, switchMap, take, tap } from 'rxjs/operators';\n\nimport { Company } from 'src/app/interface';\nimport { UserService } from 'src/app/modules/user/user.service';\nimport { State } from '../../../../store/reducers';\nimport { OperatorService } from '../operator.service';\n\n@Component({\n  selector: 'app-operator-add',\n  templateUrl: './operator-add.component.html',\n  styleUrls: ['./operator-add.component.scss'],\n})\nexport class OperatorAddComponent implements OnInit {\n  @Input() company: Company;\n  addOperatorForm: FormGroup;\n  inputType: 'password' | 'text' = 'password';\n  formSubmitSubject$ = new Subject();\n  @ViewChild('addOperatorFormDirective', { static: false }) addOperatorFormDirective: FormGroupDirective;\n  loading$: Observable<boolean> | Store<boolean>\n  loadingIndicator: any;\n\n  constructor(\n    public modalController: ModalController,\n    private userService: UserService,\n    private store: Store<State>,\n    private operatorService: OperatorService,\n  ) { }\n\n  ngOnInit() {\n    this.loading$ = this.operatorService.loading$;\n\n    this.addOperatorForm = new FormGroup({\n      login: new FormControl(\n          '',\n          {\n            updateOn: 'blur',\n            validators: [\n              Validators.pattern('^[a-zA-Z0-9_\\\\-]{2,60}$'),\n              Validators.minLength(2),\n              Validators.maxLength(60),\n              Validators.required,\n            ],\n            asyncValidators: [\n              this.userService.checkLoginUnique(),\n            ],\n          }),\n      password: new FormControl(\n          '',\n          {\n            updateOn: 'change',\n            validators: [\n              Validators.pattern('^[a-zA-Z0-9_\\\\-]{8,60}$'),\n              Validators.minLength(8),\n              Validators.maxLength(60),\n              Validators.required,\n            ],\n          }),\n      passwordConfirm: new FormControl(\n          '',\n          {\n            updateOn: 'change',\n            validators: [\n              Validators.pattern('^[a-zA-Z0-9_\\\\-]{8,60}$'),\n              Validators.minLength(8),\n              Validators.maxLength(60),\n              Validators.required,\n            ],\n          }),\n      email: this.userService.emailFormControl(),\n    }, this.userService.matchPassword,\n    );\n\n    // prevent form submit before async validator completes\n    this.formSubmitSubject$\n        .pipe(\n            tap(() => this.addOperatorForm.markAsDirty()),\n            switchMap(() =>\n              this.addOperatorForm.statusChanges.pipe(\n                  startWith(this.addOperatorForm.status),\n                  filter((status) => status !== 'PENDING'),\n                  take(1),\n              ),\n            ),\n            filter((status) => status === 'VALID'),\n        )\n        .subscribe((validationSuccessful) => this.onSignup());\n  }\n\n  dismiss(data?: any): void {\n    this.modalController.dismiss(data);\n  }\n\n  switchInputType() {\n    if (this.inputType === 'password') {\n      this.inputType = 'text';\n    } else {\n      this.inputType = 'password';\n    }\n  }\n\n  onSignup() {\n    this.dismiss({\n      // _id: 'fff',\n      login: this.addOperatorForm.get('login').value,\n      password: this.addOperatorForm.get('password').value,\n      email: this.addOperatorForm.get('email').value,\n    });\n    this.resetForm();\n\n    // this.userService.createCompanyUser({\n    //   login: this.addOperatorForm.get('login').value,\n    //   password: this.addOperatorForm.get('password').value,\n    //   email: this.addOperatorForm.get('email').value,\n    // })\n    //     .subscribe(\n    //         (_) => {\n    //           this.resetForm();\n    //           this.dismiss(null);\n    //         },\n    //         (err) => this.dismiss(err.error),\n    //     );\n  }\n\n  resetForm() {\n    if (this.addOperatorFormDirective) {\n      this.addOperatorFormDirective.resetForm();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AlertController, ModalController } from '@ionic/angular';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Company, OperatorFormFields, User } from '../../../interface';\nimport { State } from '../../../store/reducers';\nimport { getCompany, getUser } from '../../../store/reducers/user.reducer';\nimport { UpdateFormFieldComponent } from '../../shared/update-form-field/update-form-field.component';\nimport { OperatorAddComponent } from './operator-add/operator-add.component';\nimport { OperatorService } from './operator.service';\n\n\n@Component({\n  selector: 'app-operator',\n  templateUrl: './operator.page.html',\n  styleUrls: ['./operator.page.scss'],\n})\nexport class OperatorPage implements OnInit {\n  entities$: Observable<User[]> | Store<User[]>;\n  loading$: Observable<boolean> | Store<boolean>\n  user: User | null = null;\n  company: Company | null = null;\n  operators: User[];\n  cookie: any;\n\n  constructor(\n    private operatorService: OperatorService,\n    private store: Store<State>,\n    public modalController: ModalController,\n    public alertController: AlertController,\n  ) { }\n\n  ngOnInit() {\n    this.store.select(getCompany)\n        .subscribe((company) => {\n          if (company) {\n            this.company = company;\n            this.operatorService.getAll();\n          }\n        });\n\n    this.store.select(getUser)\n        .subscribe((user) => {\n          if (user) {\n            this.user = user;\n          }\n        });\n\n    this.entities$ = this.operatorService.entities$;\n    this.loading$ = this.operatorService.loading$;\n\n    this.entities$.subscribe((operators) => this.operators = operators);\n  }\n\n  async presentAlert(_id: string, login: string) {\n    const alert = await this.alertController.create({\n      // cssClass: 'my-custom-class',\n      header: 'Delete',\n      subHeader: 'user with login: ' + login,\n      message: 'Are you shure?',\n      buttons: [{\n        text: 'Cancel',\n        role: 'cancel',\n        // cssClass: 'secondary',\n        handler: (blah) => {\n          console.log('Confirm Cancel: blah');\n        },\n      }, {\n        text: 'Okay',\n        handler: () => this.remove(_id),\n      }],\n    });\n    await alert.present();\n  }\n\n  async presentModal(component, data?: any): Promise<any> {\n    const modal = await this.modalController.create({\n      component,\n      // cssClass: 'my-custom-class',\n      componentProps: data,\n    });\n    await modal.present();\n    return await modal.onWillDismiss();\n  }\n\n  blockUser(_id: string, blocked: boolean) {\n    this.operatorService.update({\n      _id,\n      blocked,\n    }).subscribe(\n        (result) => console.log('update result', result),\n        (err) => console.log('update error', err));\n  }\n\n  async update(_id: string, field: OperatorFormFields) {\n    const { data } = await this.presentModal(UpdateFormFieldComponent, { data: this.operatorService.formFieldOptions(field) });\n    if (data) {\n      this.operatorService.update({\n        _id,\n        [field]: data,\n      }).subscribe(\n          (result) => console.log('update result', result),\n          (err) => console.log('update error', err),\n      );\n    }\n  }\n\n  async add() {\n    const { data } = await this.presentModal(OperatorAddComponent, { company: this.company });\n    if (data) {\n      this.operatorService.add(data).subscribe(\n          (result) => console.log('add result', result),\n          (err) => console.log('add error', err),\n      );\n    }\n  }\n\n  remove(_id: string) {\n    return this.operatorService.delete(_id);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { OperatorPageRoutingModule } from './operator-routing.module';\n\nimport { OperatorPage } from './operator.page';\nimport { OperatorAddComponent } from './operator-add/operator-add.component';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    OperatorPageRoutingModule,\n    SharedModule,\n  ],\n  declarations: [OperatorPage, OperatorAddComponent],\n})\n\nexport class OperatorPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJvcGVyYXRvci5wYWdlLnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJvcGVyYXRvci1hZGQuY29tcG9uZW50LnNjc3MifQ== */\";","import { Injectable } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { EntityCollectionServiceBase, EntityCollectionServiceElementsFactory } from '@ngrx/data';\nimport { FormFieldOptions, User } from '../../../interface';\nimport { UserService } from '../../user/user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\n\nexport class OperatorService extends EntityCollectionServiceBase<User> {\n  constructor(\n      serviceElementsFactory: EntityCollectionServiceElementsFactory,\n    private userService: UserService,\n  ) {\n    super('Operator', serviceElementsFactory);\n  }\n\n  formFieldOptions(field: 'email') {\n    return this.formFieldsOptions.get(field);\n  }\n\n  private get formFieldsOptions() {\n    return new Map<'email', FormFieldOptions>([\n      ['email', {\n        title: 'Update email',\n        subTitle: 'Email',\n        iconName: 'mail-outline',\n        inputLable: 'Input email',\n        inputType: 'email',\n        errors: new Map<string, string>([\n          ['required', 'Required value'],\n          ['pattern', 'Entered wrong email'],\n        ]),\n        formControl: {\n          formState: '',\n          validatorOrOpts: {\n            updateOn: 'blur',\n            validators: [\n              Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'),\n              Validators.required,\n            ],\n            asyncValidators: [\n              this.userService.checkEmailUnique(),\n\n            ],\n          },\n        },\n      }],\n\n    ]);\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Operator\\n      <ng-container *ngIf=\\\"loading$ | async as loadiong\\\"> Loading..</ng-container>\\n    </ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-menu-button contentId=\\\"dashboard-content\\\"></ion-menu-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size-md=\\\"8\\\" offset-md=\\\"2\\\">\\n        <h2 class=\\\"ion-text-center\\\">{{company?.companyName}}</h2>\\n\\n        <ion-list>\\n          <ion-list-header>\\n            <ion-label>\\n              <h2>Users</h2>\\n            </ion-label>\\n            <ion-button (click)=\\\"add()\\\">New operator</ion-button>\\n          </ion-list-header>\\n\\n          <ng-container *ngFor=\\\"let operator of operators\\\">\\n            <ion-item-sliding *ngIf=\\\"operator._id !== user._id\\\">\\n              <ion-item>\\n                <ion-label>\\n                  <ion-row>\\n\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"4\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <h4>Login:</h4>\\n                        </ion-label>\\n                      </ion-item>\\n                    </ion-col>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"8\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <ion-text color=\\\"primary\\\">\\n                            <p>\\n                              {{operator.login}}\\n                            </p>\\n                          </ion-text>\\n                        </ion-label>\\n                      </ion-item>\\n                    </ion-col>\\n                  </ion-row>\\n\\n                  <ion-row>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"4\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <h4>Email:</h4>\\n                        </ion-label>\\n                      </ion-item>\\n                    </ion-col>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"8\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <ion-text color=\\\"primary\\\">\\n                            <p>\\n                              {{operator.email}}\\n                            </p>\\n                          </ion-text>\\n                        </ion-label>\\n                        <ion-button (click)=\\\"update(operator._id, 'email')\\\">\\n                          Update\\n                        </ion-button>\\n                      </ion-item>\\n                    </ion-col>\\n                  </ion-row>\\n\\n                  <ion-row>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"4\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <h4>Role:</h4>\\n                        </ion-label>\\n                      </ion-item>\\n                    </ion-col>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"8\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <ion-text color=\\\"primary\\\">\\n                            <p>\\n                              {{operator.role}}\\n                            </p>\\n                          </ion-text>\\n                        </ion-label>\\n                      </ion-item>\\n                    </ion-col>\\n                  </ion-row>\\n\\n                  <ion-row>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"4\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <h4>Blocked:</h4>\\n                        </ion-label>\\n                      </ion-item>\\n                    </ion-col>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"8\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <ion-text color=\\\"primary\\\">\\n                            <p>\\n                              {{!!operator.blocked}}\\n                            </p>\\n                          </ion-text>\\n                        </ion-label>\\n                        <ion-button (click)=\\\"blockUser(operator._id, !operator.blocked)\\\">\\n                          {{!!operator.blocked? 'Unblock' : 'Block'}}\\n                        </ion-button>\\n                      </ion-item>\\n                    </ion-col>\\n                  </ion-row>\\n\\n                  <ion-row>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"4\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <h4>Activated:</h4>\\n                        </ion-label>\\n                      </ion-item>\\n                    </ion-col>\\n                    <ion-col class=\\\"ion-no-padding\\\" size=\\\"8\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                          <ion-text color=\\\"primary\\\">\\n                            <p>\\n                              {{!!operator.activated}}\\n                            </p>\\n                          </ion-text>\\n                        </ion-label>\\n                        <ion-note slot=\\\"end\\\">\\n                          slide to delete\\n                        </ion-note>\\n                      </ion-item>\\n                    </ion-col>\\n                    <!--   <ion-col class=\\\"ion-no-padding\\\" size=\\\"2\\\">\\n                      <ion-item class=\\\"ion-no-padding\\\" lines=\\\"none\\\">\\n                        <ion-note slot=\\\"end\\\">\\n                          slide to delete\\n                        </ion-note>\\n                      </ion-item>\\n                    </ion-col> -->\\n                  </ion-row>\\n                </ion-label>\\n                <!-- <ion-note slot=\\\"end\\\">\\n                  slide to delete\\n                </ion-note> -->\\n              </ion-item>\\n\\n              <ion-item-options side=\\\"end\\\">\\n                <ion-item-option color=\\\"danger\\\" (click)=\\\"presentAlert(operator._id, operator.login)\\\">\\n                  <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n                </ion-item-option>\\n              </ion-item-options>\\n\\n            </ion-item-sliding>\\n          </ng-container>\\n        </ion-list>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OperatorPage } from './operator.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OperatorPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OperatorPageRoutingModule {}\n"],"sourceRoot":"webpack:///"}